--------------------------------------------------------------------------------
:::::::::::> notes
--------------------------------------------------------------------------------


----------------------------------------------------------------------------
::::: reference
----------------------------------------------------------------------------
starting point: 
protocol (v2.1-pre)
* https://github.com/telehash/telehash.org/blob/master/protocol.md

go / workspace / project layout references:
* http://golang.org/doc/code.html#Organization
* https://code.google.com/p/go-wiki/wiki/GithubCodeLayout

cipher sets
- cs1a
- cs2a
- cs3a:
https://godoc.org/code.google.com/p/go.crypto/nacl/box          // key pair
https://godoc.org/code.google.com/p/go.crypto/nacl/secretbox    // line



----------------------------------------------------------------------------
::::: design
----------------------------------------------------------------------------

----------------------- 
: client api
-----------------------


------------begin
Adapted From:
https://github.com/telehash/telehash.org/blob/master/implementers.md

common api / patterns exposed by switch libs:

- generate a hashname
    . in: csids (optional)
    . do: gen new key pair, parts, and hashname
    . out: hashname
    . out: parts and keys

- switch creation / initialization
    . in: parts and keys
    . do: create a switch

- add seeds
    . load seeds from something like seeds.json

- start channel
    . in: hashname, type, initial json/body
    . do: initiate a channel
    . out: call an optional callback

- listen for channel
    . in: channel type and callback/event trigger
    . do: take action for incoming new channel of that type
------------end

other notes on client api:

- remember "net" in the std lib
    . interface of Dial, Listen, Accept.  may be applicable.
    . PacketConn



----------------------------------
: Structures / Types / Files
----------------------------------

// local exerciser to help with testing
./exercise.go
    . switch
    . switch.init               // creates cipher sets and hashname
    . switch.load_from_file     // load previous


// Switch provides an api to applications using the library
. switch(s)


. cipher_sets
    . interface for CipherSet
        . generate()
        . encrypt_line_packet()
        . decrypt_line_packet()
    . type bundle of CipherSet          // csid, fingerprint, pub, priv
    . type bundle of CipherSetParts     // csid, fingerprint
    . cs1a
    . cs2a
    . cs3a - Use NaCl to help drive interface design and backfit
        . type CS3aCypherSet struct {
            type FingerPrint string
            type PublicKey []bytes
            type PrivateKey []bytes
            }
        . generate()
        . encrypt_line_packet()
        . decrypt_line_packet()


. hashname
. packet(s)
. line(s)
. channel(s)







-eof
