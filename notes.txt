--------------------------------------------------------------------------------
:::::::::::> notes
--------------------------------------------------------------------------------

----------------------------------------------------------------------------
::::: todo
----------------------------------------------------------------------------


next items:
. add hashname generation
. start cs3a_test.go
. start cipher_sets_test.go
. start switch_test.go
. building a line?



----------------------------------------------------------------------------
::::: reference
----------------------------------------------------------------------------
starting point: 
protocol (v2.1-pre)
. https://github.com/telehash/telehash.org/blob/master/protocol.md


go / workspace / project layout references:
. http://golang.org/doc/code.html#Organization
. https://code.google.com/p/go-wiki/wiki/GithubCodeLayout


cipher sets and golang
- cs1a
    . not sure there is go implementation for ECC secp160r1
- cs2a
    https://godoc.org/code.google.com/p/go.crypto/rsa
    https://godoc.org/code.google.com/p/go.crypto/x509
    ...
- cs3a:
    https://godoc.org/code.google.com/p/go.crypto/nacl/box          // key pair
    https://godoc.org/code.google.com/p/go.crypto/nacl/secretbox    // line



----------------------------------------------------------------------------
::::: early design notes
----------------------------------------------------------------------------


----------------------------------
: Telehash Layers and the Lexicon
----------------------------------
This is an interpretation and not to be taken as official documentation.  Some
of these terms conflict or are a little different than the current protocol
specs.  


flow and layers:
Content flows over channels, inside channel packets.  Channel packets flow over
lines, inside line packets.  Line packets flow over a network transport, inside
transport packets (ex. UDP datagrams).


* SwitchInstance
This is sometimes called a switch or a hashname.  A single switch instance is
started by an application and provides the means for communicating with other
switches.  At creation, a switch instance generates key pairs for each cipher
set it can support.  These key pairs are used to generate parts and a
globally unique hashname.


* Channel(s)
Channels are logical constructs an application uses to pass data back and
forth.  There is a set of core channel types used by the telehash protocol,
but an application can also create custom channel types.  The core types are
"seek", "link", "peer", "connect", "bridge", "path".


* Channel Packets (Inner Packets)
Channel packets contain a json head and a body.  Channel packets are encrypted and
then sent over a line.  


* Line(s)
Lines are virtual connections between two switch instances, protected by
encryption.  The encryption used is based on the best common cipher set
supported by each switch instance.


* Line Packets (Outer Packets)
Line packets contain a head and a body.  The body is often a channel packet
wrapped in an additional layer of encryption.  Line packets wrap and transmit
these channel packets over a network transport.

The basic line packet types are "open" (open a new line) and "line" (data).
Despite the name line packet, there can also be other types of outer packets
which are specific to the network transport (discovery, routing, etc).


* Network Transport(s)
A network transport is used to transmit Telehash Packets.  This could be UDP,
TCP, HTTP, Bluetooth, and more.


-- also:

* Packet
<2bytes-length-of-head>[Head][Body]

* Cipher Set

* Paths

* DHT / Links




----------------------- 
: notes on client api
-----------------------


------------begin
Adapted From:
https://github.com/telehash/telehash.org/blob/master/implementers.md

common api / patterns exposed by switch libs:

- generate a hashname
    . in: csids (optional)
    . do: gen new key pair, parts, and hashname
    . out: hashname
    . out: parts and keys

- switch creation / initialization
    . in: parts and keys
    . do: create a switch

- add seeds
    . load seeds from something like seeds.json

- start channel
    . in: hashname, type, initial json/body
    . do: initiate a channel
    . out: call an optional callback

- listen for channel
    . in: channel type and callback/event trigger
    . do: take action for incoming new channel of that type
------------end



other notes on client api:

- remember "net" in the golang std lib
    . interface of Dial, Listen, Accept.  may be applicable.
    . PacketConn



----------------------------------
: scratch notes on structures,
: types, files, etc
----------------------------------

// local exerciser to help with testing
./exercise.go
    . switch
    . switch.init               // creates cipher sets and hashname
    . switch.load_from_file     // load previous


// Switch provides a client api to applications using the library
. switch(s)


//Cipher sets produce keys and parts, but also...
. cipher_sets
    . interface for CipherSet
        . generate()
        . encrypt_line_packet()
        . decrypt_line_packet()
    . type bundle of CipherSet          // csid, fingerprint, pub, priv
    . type bundle of CipherSetParts     // csid, fingerprint
    . cs1a
    . cs2a
    . cs3a - Use NaCl to help drive interface design and backfit
        . type CS3aCypherSet struct {
            type FingerPrint string
            type PublicKey []bytes
            type PrivateKey []bytes
            }
        . generate()
        . encrypt_line_packet()
        . decrypt_line_packet()


. hashname
. packet(s)
. line(s)
. channel(s)





-eof
