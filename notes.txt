--------------------------------------------------------------------------------
:::::::::::> notes
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
:::::::::  todo  :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
--------------------------------------------------------------------------------

next/current items:

IP . loading seeds and hints
IP . saving/loading other switch state

IP . switching logic

. building a line session
. line session management
. channel design and interaction with lines





--------------------------------------------------------------------------------
::::::::::::::  snapshot  ::::::::::::::::::::::::::::::::::::::::::::::::::::::
--------------------------------------------------------------------------------

[rain _test]$go run exercise.go
2014/06/01 23:19:01.968742 Starting exercise
2014/06/01 23:19:01.968939 Starting initialization of switch
2014/06/01 23:19:01.968946 Starting initialization of new cipher pack
2014/06/01 23:19:01.968987 initialize 3a...
2014/06/01 23:19:01.969756        csid: 3a
2014/06/01 23:19:01.969771 fingerprint: 414fa2efa4185282072069f88b907d5475f1018e0a12d11031ed15baf22f0d42
2014/06/01 23:19:01.969779 Finished initialization of cipher sets
2014/06/01 23:19:01.969785 Generating hashname from cipher pack
2014/06/01 23:19:01.969794 Starting hashname creation
2014/06/01 23:19:01.969830 switch hashname: c61d772b2193188193f67b55f81257637fa25989a3a87624eeaf8be3c3f808a0
2014/06/01 23:19:01.969837 Finished hashname creation
2014/06/01 23:19:02.014518 Loaded peers of type seed
2014/06/01 23:19:02.033579 Starting peerstore service
2014/06/01 23:19:02.033639 peerstore: accepted a request
2014/06/01 23:19:02.033659 peerstore: sending a response
2014/06/01 23:19:02.033681 peer added to peerstore: peerSwitch(11111111111111111111111114ad2e74fb144cda3f4710d4f40e2c75d975272e)
2014/06/01 23:19:02.033691 peerstore: accepted a request
2014/06/01 23:19:02.033697 peerstore: sending a response
2014/06/01 23:19:02.033706 peer added to peerstore: peerSwitch(22222222222222222222222224ad2e74fb144cda3f4710d4f40e2c75d975272e)
2014/06/01 23:19:02.033713 Finished initialization of switch
2014/06/01 23:19:02.033719 Switch ready
2014/06/01 23:19:02.033728 Switch instance created: Switch(c61d772b2193188193f67b55f81257637fa25989a3a87624eeaf8be3c3f808a0)
2014/06/01 23:19:02.033735 switch hashname: c61d772b2193188193f67b55f81257637fa25989a3a87624eeaf8be3c3f808a0
2014/06/01 23:19:02.033745 Finished exercise (65.028429ms)


[rain _test]$go run switch-ping.go
2014/06/01 23:19:20.361415 Starting exercise
2014/06/01 23:19:20.361620 Starting initialization of switch
2014/06/01 23:19:20.361628 Reading in pre-existing cipher pack
2014/06/01 23:19:20.362105        csid: 3a
2014/06/01 23:19:20.362123 fingerprint: 2fc36b1bd5807fbd2bf803a5a64bf91733141e792698b9cfaa21fac76ecd2886
2014/06/01 23:19:20.362131  public_key: la6cKhlVYrXAPBFI50v/8pAQKKUe6FgvxtHyJ2pJGyA=
2014/06/01 23:19:20.362137 Generating hashname from cipher pack
2014/06/01 23:19:20.362147 Starting hashname creation
2014/06/01 23:19:20.362181 switch hashname: 501ae97f1b5fcf49af34c9ce53279574ee87fffcc667b659b5a8163d7e48441f
2014/06/01 23:19:20.362188 Finished hashname creation
2014/06/01 23:19:20.362812 Loaded peers of type seed
2014/06/01 23:19:20.374388 Starting peerstore service
2014/06/01 23:19:20.374399 peerstore: accepted a request
2014/06/01 23:19:20.374419 peerstore: sending a response
2014/06/01 23:19:20.374435 peer added to peerstore: peerSwitch(c0dbd9479df1fdeb16ae2ef3e5de93d8a5ff54d4d69b7a3e835f96729189ec68)
2014/06/01 23:19:20.374442 Finished initialization of switch
2014/06/01 23:19:20.374448 Switch ready
2014/06/01 23:19:20.374456 Switch instance created: Switch(501ae97f1b5fcf49af34c9ce53279574ee87fffcc667b659b5a8163d7e48441f)
2014/06/01 23:19:20.374474 switch hashname: 501ae97f1b5fcf49af34c9ce53279574ee87fffcc667b659b5a8163d7e48441f
2014/06/01 23:19:20.374485 Finished exercise (13.092651ms)



--------------------------------------------------------------------------------
:::::::::::::::::::  reference  ::::::::::::::::::::::::::::::::::::::::::::::::
--------------------------------------------------------------------------------
starting point: 
protocol (v2.1-pre)
. https://github.com/telehash/telehash.org/blob/master/protocol.md


go / workspace / project layout references:
. http://golang.org/doc/code.html#Organization
. https://code.google.com/p/go-wiki/wiki/GithubCodeLayout


cipher sets and golang

- cs1a
    . not sure there is a go implementation for ECC secp160r1

- cs2a
    https://godoc.org/code.google.com/p/go.crypto/rsa
    https://godoc.org/code.google.com/p/go.crypto/x509
    ...

- cs3a:
    For box and secretbox:
    https://godoc.org/code.google.com/p/go.crypto/nacl/box          // switch key pair
    https://godoc.org/code.google.com/p/go.crypto/nacl/secretbox    // line

    For onetimeauth, the nacl docs say that poly1305 is used, so
    look here for onetimeauth:
    https://godoc.org/code.google.com/p/go.crypto/poly1305
    This is the same thing used in crypto_secretbox.

    If the above will work, all the pieces for cs3a should be available.



--------------------------------------------------------------------------------
::::::::::::::::::::  early design notes  ::::::::::::::::::::::::::::::::::::::
--------------------------------------------------------------------------------


----------------------------------
: Telehash Layers and the Lexicon
----------------------------------
This is an interpretation and not to be taken as official documentation.  Some
of these terms conflict or are a little different than the current protocol
specs.  


flow and layers:
Content flows over channels, inside channel packets.  Channel packets flow over
lines, inside line packets.  Line packets flow over a network transport, inside
transport packets (ex. UDP datagrams).


* SwitchInstance
This is sometimes called a switch or a hashname.  A single switch instance is
started by an application and provides the means for communicating with other
switches.  At creation, a switch instance generates key pairs for each cipher
set it can support.  These key pairs are used to generate parts and a
globally unique hashname.


* Channel(s)
Channels are logical constructs an application uses to pass data back and
forth.  There is a set of core channel types used by the telehash protocol,
but an application can also create custom channel types.  The core types are
"seek", "link", "peer", "connect", "bridge", "path".


* Channel Packets (Inner Packets)
Channel packets contain a json head and a body.  Channel packets are encrypted and
then sent over a line.  


* Line(s)
Lines are virtual connections between two switch instances, protected by
encryption.  The encryption used is based on the best common cipher set
supported by each switch instance.


* Line Packets (Outer Packets)
Line packets contain a head and a body.  The body is often a channel packet
wrapped in an additional layer of encryption.  Line packets wrap and transmit
these channel packets over a network transport.

The basic line packet types are "open" (open a new line) and "line" (data).
Despite the name line packet, there can also be other types of outer packets
which are specific to the network transport (discovery, routing, etc).


* Network Transport(s)
A network transport is used to transmit Telehash Packets.  This could be UDP,
TCP, HTTP, Bluetooth, and more.


-- also:

* Packet
<2bytes-length-of-head>[Head][Body]

* Cipher Set

* Paths

* DHT / Links




----------------------- 
: notes on client api
-----------------------


------------begin
Adapted From:
https://github.com/telehash/telehash.org/blob/master/implementers.md

common api / patterns exposed by switch libs:

- generate a hashname
    . in: csids (optional)
    . do: gen new key pair, parts, and hashname
    . out: hashname
    . out: parts and keys

- switch creation / initialization
    . in: parts and keys
    . do: create a switch

- add seeds
    . load seeds from something like seeds.json

- start channel
    . in: hashname, type, initial json/body
    . do: initiate a channel
    . out: call an optional callback

- listen for channel
    . in: channel type and callback/event trigger
    . do: take action for incoming new channel of that type
------------end



other notes on client api:

- remember "net" in the golang std lib
    . interface of Dial, Listen, Accept.  may be applicable.
    . PacketConn


----------------------------------
: structures, types, files, etc
----------------------------------

These are just scratch notes and will not match final code design.

// local exerciser to help with testing
./exercise.go
    . switch
    . switch.init
    . ping?


// Switch provides a client api to applications using the library
. switch(s)
    . switch.init               // creates cipher sets and hashname
    . switch.load_from_file     // load previous


// Cipher sets produce keys, fingerprints, and encryption schemes
. cipher_sets
    . interface for CipherSet
        . initialize()
        . fingerprint() (csid, fingerprint)
        . encryptOpenPacket(packet, recvPublicKey) (encOuterBody, lineSharedKey)
        . decryptOpenPacket()
        . makeLineEncryptionKey() ?

        . encryptLinePacket()
        . decryptLinePacket()
        // Don't store or edit lines in cs

    . type bundle of CipherSet          // csid, fingerprint, pub, priv
    . type bundle of CipherSetParts     // csid, fingerprint
    . cs1a
    . cs2a
    . cs3a - Use NaCl to help drive interface design and backfit


. hashname
. packet(s)

. line(s)
    . ingress|egress

. channel(s)


----------------------------------------------------------------------
:: switching logic
----------------------------------------------------------------------
fun fact
imp: interface message processor
the first switch/router devices on the arpanet


::  inbound - request   (A request/session initiated by remote node)
::  inbound - response  (A response from a remote node
::  inbound - relay
:: outbound - request   (A request/session to a remote node, initiated by self)
:: outbound - response  (A response to a remote node)
:: outbound - relay


-------------------------
:: inbound - request
-------------------------

---------(step 1)-----------
transport packet in on listener
    . extract telehash packet from transport
    . udp?  simple 1:1
    . http?  unwrap from inside body of request etc


---------(step 2)-----------
process outer packet (outerPacket)

    # Decode and Route

    decode-packet(outerPacket)
        head-length
        head
        body

    switch {

        head-length == 1: line open packet

            head-length == 1
            head.1      == csid
            body.all    == csdata

            not a valid csid: drop early

            route("open", csid, csdata)

        head-length == 0: line data packet 

            head-length      == 0
            head             == empty
            body.00-16       == lineid
            body.rest        == csData

            not a valid lineID: drop early

            route("line", lineID, csdata)

        default:
            drop

    }

---------(step 3a)-----------
processEncryptedOpenPacket(csid, csdata)
    # Decrypt and Decode

    get cipherset for csid from cipherpack
    openPacket = cset.decryptOpenPacket(csdata)
                    # interface / plugin
                    cs1a:
                    cs2a:
                    cs3a:
                        csdata.00-32  == auth - onetimeauth
                        csdata.33-64  == line_key - senders line level public key
                        csdata.rest   == inner_ciphertext (encrypted open packet)
                        auth and decrypt the inner ciphertext

    decode-packet(openPacket)
        head-length == 2+
        head        == open json(to, from, at, line)
        body.all    == sender switch level public key

    if head-length < 2:  invalid?  drop?
        

---------(step 3b)-----------
processEncryptedChannelPacket(lineID, csdata)

    # Decrypt and Decode

    lookup csid for the lineID
    get cipherset for csid from cipherpack
    channelPacket = cset.decryptChannelPacket(csdata)
                        # interface / plugin
                        cs1a:
                        cs2a:
                        cs3a:
                            csdata.00-24  == onetimeauth
                            csdata.rest   == inner_ciphertext (encrypted channel packet)
                            auth and decrypt the inner ciphertext



    decode-packet(channelPacket)
        head-length == 2+
        head        == channel json(type, ...)
        body        == sometimes some channel binary



    if head-length < 2:  invalid?  drop?



    switch {
        type == seek:
            channel handler?
        type == link:
        type == peer:
        type == connect:
        type == bridge:
        type == path:
        default:
            drop
    }




-------------------------
:: outbound - request
-------------------------

---------(step 1)-----------
channel handlers / systems generate a channel packet
    . could be a response to an inbound packet
    . could be an initial packet such as an outbound open request

channel packet is sent to outbound queue 

type == seek:
type == link:
type == peer:
type == connect:
type == bridge:
type == path:
type == new app/custom channel?


---------(step 2)-----------

router?


---------(step 3a)-----------

#processEncryptedOpenPacket(csid, )
#processEncryptedOpenPacket(csid, )
somethingEncryptedOpenPacket(csid, openSomething

    # Encode and Encrypt

    # what is input?  channel aware or not, of lines?
    # bootstrap problem here?

    lookup lineID for channel
    lookup csid for the lineID

    openPacket = encode-packet(openSomething)
                    head-length == len(json) (2+)
                    head        == open json(to, from, at, line)
                    body.all    == sender switch level public key

    get cipherset for csid from cipherpack

    csdata = cset.encryptOpenPacket(openPacket)
                    # interface / plugin
                    cs1a:
                    cs2a:
                    cs3a:
                        csdata.00-32  == auth - onetimeauth
                        csdata.33-64  == line_key - senders line level public key
                        csdata.rest   == inner_ciphertext (encrypted open packet)
                        sign and encrypt the inner ciphertext


---------(step 3b)-----------

somethingEncryptedChannelPacket(channelStuff)

    # Encode and Encrypt

    lookup lineID for channel
    lookup csid for the lineID
    get cipherset for csid from cipherpack

    channelPacket = decode-packet(channelStuff)
                        head-length == len(json) 2+
                        head        == channel json(type, ...)
                        body        == sometimes some channel binary

    csdata = cset.encryptChannelPacket(channelPacket)
                        # interface / plugin
                        cs1a:
                        cs2a:
                        cs3a:
                            csdata.00-24  == onetimeauth
                            csdata.rest   == inner_ciphertext (encrypted channel packet)
                            sign and encrypt the inner ciphertext



---------(step 4)-----------

make outer packet (csdata, )

    # Encode and ...

    outerPacket = encode-packet(csdata, )
        head-length
        head
        body

        switch {

            head-length == 1: line open packet

                head-length == 1
                head.1      == csid
                body.all    == csdata

            head-length == 0: line data packet 

                head-length      == 0
                head             == empty
                body.00-16       == lineid
                body.rest        == csData

                route("line", lineID, csdata)

            default:
                drop

    match the outer packet / line to a transport target
    send the packet out over the transport


---------(step 5)-----------
---------(step 6)-----------
---------(step 7)-----------


-------------------------
:: words
-------------------------
encode
decode
process
generate
make
build
pack
repack
unpack
assemble

-------------------------
:: open handshake
-------------------------

. cipher set initialization at switch initialization
    . generate/use an instance level key pair (box.GenerateKey(rand.Reader))


. send: open request (cs3a)

    . generate a line id (16 random bytes lower case hex encoded)
    . generate a new line level key pair (crypto_box) (box.GenerateKey(rand.Reader))

    . encryption 
        . build the inner packet (json (to, from, parts, at) + switch public key)
        . generate a nonce
        . generate the 'agreedKey' (shared secret)
        . encrypt the inner packet using crypto_secretbox
        
        . prepend the line public key to make the open packet data

    . authentication
        . generate a macKey
        . use onetimeauth/poly1305 to generate an HMAC
        . prepend the hmac to the open packet data


. recv: open request (cs3a)

    . unpack the open packet

    . generate a line id (16 random bytes lower case hex encoded)
    . generate a new line level key pair (crypto_box) (box.GenerateKey(rand.Reader))

    . authentication
        . retrieve the hmac
        . generate a macKey
        . use onetimeauth/poly1305 verify to authenticate the packet

    . decryption 
        . generate a nonce
        . generate the 'agreedKey' (shared secret)
        . decrypt the inner packet using crypto_secretbox_open


-------------------------
:: channels/lines/paths
-------------------------
:: scratch work


switch.send(channelMsg(json), channelType, remoteHashname)





type channelMap map[?]channel
}

(cm *channelMap) getChannel() {
    // mutex?
}

type channel struct {
    id   int
    type string
    send chan
    recv chan
}

(c *channel) router() {
    select {
    case msg <-c.recv:
    case msg <-c.send:
    default:
    }
}

(c *channel) start() {
    go c.router()
}

var cm channelMap
var c  channel

c := cm.getChannel()
    // get existing channel or create new channel
    // point of syncronization for channel map
    // return empty channel, so it won't block?
    c.start()
    return c
    
c.send <- message
    // input channel is point of syncronization for channel
    // initialize the channel if this is the first message




type lineMap map[hashname/string]line

(lm *lineMap) func getLine() {
    // mutex?
}

type line struct {
    remoteHashname  string
    local           lineHalf
    remote          lineHalf
    encryptionKey   [32]byte
    decryptionKey   [32]byte
    ...

    // new line management
    openLocal       chan bool
    openRemote      chan packet

    // send/recv line packets (buffered?)
    send            chan packet
    recv            chan packet
}

(l *line) router() {

    for {
        select {

            case <-c.openLocal:
                // create and send an open (localLine)
                l.newLocalLine()
                c.openLocal = nil

            case msg <-c.openRemote:
                // accept an open (remoteLine)
                l.newRemoteLine()
                c.openRemote = nil

                // if needed, setup the local line
                if !c.local:
                    c.openLocal <- True

            case msg <-c.send:
                go c.process.send(msg)
                // inside send(), block on initializing

            case msg <-c.recv:
                go c.process.recv(msg)
                // inside recv(), block on initializing

            default:
                if c.local and c.remote:
                    close(c.initialized)
        }
    }
}

(l *line) start() {
    c.start <- true
    go c.router()
}

(l *line) func newLocalLine(to string, parts map[string]string, cset cipherSet) {

    create a new localLine

    localLine.id -- generate new line id
    localLine.at -- generate a new at
    localLine.secret -- later...

    json := make the json (to, from(parts), at, localLineId)
    body := cset.publicKey -- needs to be a part of the interface? getPublicKey?
    packet := encodePacket(json, body)
    openPacketBody, localLineSecret, err := encryptOpenPacketBody(packet []byte, remotePublicKey *[32]byte)

    localLine.secret = localLineSecret

    openPacketJson := ""
    openPacketBody := openPacketBody
    openPacket := encodePacket(openPacketJson, openPacketBody)

    store partial line data...
    send...
}

(l *line) func newRemoteLine() {
}

var lm lineMap
var l  line

l := lm.getLine()
    // get existing line or create new line
    // point of syncronization for channel map
    // return empty channel, so it won't block?
    l := make(line)
    l.hashname = ...
    l.start()
    return l

<-l.ready
l.send <- message
    // input channel is point of syncronization for line
    // initialize the line if this is the first message
    // ... open ... line




-eof
